generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  emailVerified     Boolean?     @default(false)
  firstName         String
  lastName          String
  imageUrl          String?
  encryptedPassword String? // if you are using oauth to create the user, you will not have a password
  role              Role         @default(USER)
  savedCards        SavedCards[] // 1:M relation to Card
  cartItems         CartItem[] // 1:M relation to CartItem
  Account           Account[]
  Session           Session[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([id, email, firstName, lastName, createdAt, updatedAt]) // allows for more efficient queries
}

model YugiohCard {
  id             Int          @id
  SavedCards     SavedCards[] // yugi oh card can be saved in multiple user's saved cards
  CartItem       CartItem[] // yugi oh card can be in multiple user's cart items
  name           String
  price          Float
  imageUrl       String
  type           String
  frameType      String
  desc           String
  atk            Int?
  def            Int?
  level          Int?
  race           String
  attribute      String?
  archetype      String?
  ygoprodeck_url String
  pend_desc      String?
  monster_desc   String?
  scale          Int?
  linkval        Int?
}

model SavedCards {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade) // 1:M relation to User
  yugiohCardId Int
  yugiohCard   YugiohCard @relation(fields: [yugiohCardId], references: [id], onDelete: Cascade) // 1:M relation to YugiohCard
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CartItem {
  id           String     @id @default(uuid())
  userId       String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade) // 1:M relation to User
  yugiohCardId Int
  yugiohCard   YugiohCard @relation(fields: [yugiohCardId], references: [id], onDelete: Cascade) // 1:M relation to YugiohCard
  name         String
  quantity     Int
  price        Float
  desc         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
